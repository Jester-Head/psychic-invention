import scrapy
from scrapy_playwright.page import PageMethod

from wow_classes.items import ClassMechanicsItem


class WowheadSpider(scrapy.Spider):
    """
    A Scrapy spider that crawls the abilities page for each class on wowhead.com, extracts information about each ability, 
    and stores it in a ClassMechanicsItem.
    """
    name = 'wowhead_spider'
    custom_settings = {
        'ITEM_PIPELINES': {
            'wow_classes.pipelines.WowheadPipeline': 400,
        }
    }

    def start_requests(self):
        """
        Generates a request for each class's abilities page.
        """

        urls = ["https://www.wowhead.com/spells/abilities/death-knight", "https://www.wowhead.com/spells/abilities/demon-hunter", "https://www.wowhead.com/spells/abilities/druid", "https://www.wowhead.com/spells/abilities/evoker", "https://www.wowhead.com/spells/abilities/hunter", "https://www.wowhead.com/spells/abilities/mage",
                "https://www.wowhead.com/spells/abilities/monk", "https://www.wowhead.com/spells/abilities/paladin", "https://www.wowhead.com/spells/abilities/priest", "https://www.wowhead.com/spells/abilities/rogue", "https://www.wowhead.com/spells/abilities/shaman", "https://www.wowhead.com/spells/abilities/warlock", "https://www.wowhead.com/spells/abilities/warrior"]
        for url in urls:
            yield scrapy.Request(url, callback=self.parse_abilities, meta=dict(
                playwright=True,
                playwright_include_page=True,
                playwright_page_methods=[
                    PageMethod('wait_for_selector', '.listview-mode-default'),
                ],
                errback=self.errback,
            ))

    async def parse_abilities(self, response):
        """
        Extracts information about each ability from the page and stores it in a ClassMechanicsItem.

        Parameters:
            response (Response): The response object generated by the request.
        """
        page = response.meta["playwright_page"]
        await page.close()
        results = response.css('.clickable')

        name = results.xpath("//h1[@class='heading-size-1']/text()").extract()

        spell_icon = results.xpath('//ins//@style').extract()
        ability = results.xpath(
            '//*[contains(concat( " ", @class, " " ), concat( " ", "q-1", " " ))]/text()').extract()
        school = results.xpath(
            '//td[(((count(preceding-sibling::*) + 1) = 5) and parent::*)]/text()').extract()

        item_list = list(zip(spell_icon, ability, school))

        for row in item_list:
            item = ClassMechanicsItem()
            item['class_name'] = name[0]
            item['spell_icon'] = row[0]
            item['ability'] = row[1]
            item['school'] = row[2]
            yield item

    async def errback(self, failure):
        page = failure.request.meta["playwright_page"]
        await page.close()
